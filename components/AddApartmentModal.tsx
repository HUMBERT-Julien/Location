
import React, { useState } from 'react';
import { Apartment, ChecklistItem } from '../types';
import { generateCleaningChecklist } from '../services/geminiService';
import { XMarkIcon, SparklesIcon, ArrowPathIcon } from './Icons';

interface AddApartmentModalProps {
  onClose: () => void;
  // FIX: Update onAdd prop to accept a checklist without IDs, as IDs are generated by the hook.
  onAdd: (newApartment: Omit<Apartment, 'id' | 'status' | 'checklist'> & { checklist: Omit<ChecklistItem, 'id'>[] }) => void;
}

export const AddApartmentModal: React.FC<AddApartmentModalProps> = ({ onClose, onAdd }) => {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [description, setDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerateChecklist = async () => {
      if (!description.trim()) {
          setError("Veuillez d'abord fournir une description.");
          return;
      }
      setIsLoading(true);
      setError(null);
      try {
        const generatedItems = await generateCleaningChecklist(description);
        handleSubmit(generatedItems);
      } catch (err: any) {
        setError(err.message || "Une erreur est survenue.");
      } finally {
        setIsLoading(false);
      }
  };
  
  // FIX: Update checklist type to match what generateCleaningChecklist returns.
  const handleSubmit = (checklist: Omit<ChecklistItem, 'id'>[]) => {
      if (!name.trim() || !address.trim() || !description.trim()) {
          setError("Tous les champs sont obligatoires.");
          return;
      }
      // FIX: Add missing 'personnel' property to align with the 'onAdd' prop's type.
      onAdd({ name, address, description, checklist, personnel: {} });
      onClose();
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-xl w-full max-w-md m-auto transform transition-all">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">Ajouter un appartement</h2>
            <button onClick={onClose} className="text-slate-400 hover:text-slate-600 dark:text-slate-500 dark:hover:text-slate-300">
              <XMarkIcon className="w-6 h-6" />
            </button>
          </div>
          <form onSubmit={(e) => { e.preventDefault(); handleGenerateChecklist(); }}>
            <div className="space-y-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Nom de l'appartement</label>
                <input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 block w-full border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-200" required />
              </div>
              <div>
                <label htmlFor="address" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Adresse</label>
                <input type="text" id="address" value={address} onChange={(e) => setAddress(e.target.value)} className="mt-1 block w-full border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-200" required />
              </div>
              <div>
                <label htmlFor="description" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Description (ex: 2 chambres, 1 sdb, cuisine)</label>
                <textarea id="description" value={description} onChange={(e) => setDescription(e.target.value)} rows={3} className="mt-1 block w-full border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-200" required />
              </div>
            </div>
            {error && <p className="text-sm text-red-600 dark:text-red-400 mt-4">{error}</p>}
            <div className="mt-6 flex justify-end">
              <button
                type="submit"
                disabled={isLoading}
                className="w-full flex justify-center items-center gap-2 bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg shadow-sm hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <>
                    <ArrowPathIcon className="w-5 h-5 animate-spin" />
                    <span>Génération en cours...</span>
                  </>
                ) : (
                  <>
                    <SparklesIcon className="w-5 h-5" />
                    <span>Générer la checklist & Ajouter</span>
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};
